require 'libusb'

PATH = File.expand_path(File.dirname(__FILE__))
BRIGHTNESS = 2
USAGE = "Usage:
          ruby dcled_ruby.rb -m 'message here'
          ruby dcled_ruby.rb -f message.txt\n"

def main()
  rescue_this { initialise }
  option = ARGV.shift
  case option
  when "-m"
    input = ARGV.first ? ARGV.join(' ') : $stdin.read
    input.split('').each {|letter| fonts(letter).each_value {|v| to_screen( v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7] ) }}
    clear_screen
  when "-f"
    input = ARGV.first ? ARGV.join(' ') : $stdin.read
    filename = "#{PATH}/#{input}"
    message_array = IO.readlines(filename)
    message_array.join.split('').each {|letter| fonts(letter).each_value {|v| to_screen( v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7] ) }}
    clear_screen
  else
    puts USAGE
  end
end

def rescue_this(&block)
  begin
    yield
  rescue LIBUSB::ERROR_ACCESS
    abort("No permission to access USB device! Try sudo.")
  rescue LIBUSB::ERROR_BUSY
    abort("The USB device is busy!")
  rescue NoMethodError
    abort("Could not find Dream Cheeky LED Message Board device!")
  end
end

def initialise
  usb = LIBUSB::Context.new
  device = usb.devices(:idVendor => 0x1d34, :idProduct => 0x0013).first
  @led = device.open
  if @led.kernel_driver_active?(0)
    @led.detach_kernel_driver(0)
  end
end

def format_packet(row, first_segment_row_1, second_segment_row_1, third_segment_row_1, first_segment_row_2, second_segment_row_2, third_segment_row_2 )
  bytes = Array.new(8)
  bytes[0] = BRIGHTNESS
  bytes[1] = row
  bytes[2] = third_segment_row_1.to_i(2)
  bytes[3] = second_segment_row_1.to_i(2)
  bytes[4] = first_segment_row_1.to_i(2)
  bytes[5] = third_segment_row_2.to_i(2)
  bytes[6] = second_segment_row_2.to_i(2)
  bytes[7] = first_segment_row_2.to_i(2)

  rescue_this { push_to_board(bytes) }
end

def push_to_board(bytes)
  @led.control_transfer(
    :bmRequestType => 0x21,
    :bRequest      => 0x09,
    :wValue        => 0x0000,
    :wIndex        => 0x0000,
    :dataOut       => bytes.pack('cccccccc')
  )
end

def clear_screen
  "    ".split('').each {|letter| fonts(letter).each_value {|v| to_screen( v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7] ) }}
end

def to_screen(row1_new, row2_new, row3_new, row4_new, row5_new, row6_new, row7_new, row8_new)
  @row1 ||= Array.new(24, 1)
  @row2 ||= Array.new(24, 1)
  @row3 ||= Array.new(24, 1)
  @row4 ||= Array.new(24, 1)
  @row5 ||= Array.new(24, 1)
  @row6 ||= Array.new(24, 1)
  @row7 ||= Array.new(24, 1)
  @row8 ||= Array.new(24, 1)

  @row1.unshift(row1_new)
  @row1.pop

  @row2.unshift(row2_new)
  @row2.pop

  @row3.unshift(row3_new)
  @row3.pop

  @row4.unshift(row4_new)
  @row4.pop

  @row5.unshift(row5_new)
  @row5.pop

  @row6.unshift(row6_new)
  @row6.pop

  @row7.unshift(row7_new)
  @row7.pop

  @row8.unshift(row8_new)
  @row8.pop

  format_packet(0, @row1.slice(16,8).join, @row1.slice(8,8).join, @row1.slice(0,8).join, @row2.slice(16,8).join, @row2.slice(8,8).join, @row2.slice(0,8).join)
  format_packet(2, @row3.slice(16,8).join, @row3.slice(8,8).join, @row3.slice(0,8).join, @row4.slice(16,8).join, @row4.slice(8,8).join, @row4.slice(0,8).join)
  format_packet(4, @row5.slice(16,8).join, @row5.slice(8,8).join, @row5.slice(0,8).join, @row6.slice(16,8).join, @row6.slice(8,8).join, @row6.slice(0,8).join)
  format_packet(6, @row7.slice(16,8).join, @row7.slice(8,8).join, @row7.slice(0,8).join, @row8.slice(16,8).join, @row8.slice(8,8).join, @row8.slice(0,8).join)

  sleep(0.03)
end

def fonts(letter)
  letter.downcase!
  a = {1 => [1,1,1,1,1,1,1,1],
       2 => [1,0,0,0,0,0,0,1],
       3 => [0,1,1,0,1,1,1,1],
       4 => [0,1,1,0,1,1,1,1],
       5 => [0,1,1,0,1,1,1,1],
       6 => [1,0,0,0,0,0,0,1]
       }
  b = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [0,1,1,0,1,1,0,1],
       4 => [0,1,1,0,1,1,0,1],
       5 => [0,1,1,0,1,1,0,1],
       6 => [1,0,0,1,0,0,1,1]
       }
  c = {1 => [1,1,1,1,1,1,1,1],
       2 => [1,0,0,0,0,0,1,1],
       3 => [0,1,1,1,1,1,0,1],
       4 => [0,1,1,1,1,1,0,1],
       5 => [0,1,1,1,1,1,0,1],
       6 => [1,0,1,1,1,0,1,1]
       }
  d = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [0,1,1,1,1,1,0,1],
       4 => [0,1,1,1,1,1,0,1],
       5 => [0,1,1,1,1,1,0,1],
       6 => [1,0,0,0,0,0,1,1]
       }
  e = {1 =>[1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [0,1,1,0,1,1,0,1],
       4 => [0,1,1,0,1,1,0,1],
       5 => [0,1,1,0,1,1,0,1],
       6 => [0,1,1,1,1,1,0,1]

       }
  f = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [0,1,1,0,1,1,1,1],
       4 => [0,1,1,0,1,1,1,1],
       5 => [0,1,1,0,1,1,1,1],
       6 => [0,1,1,1,1,1,1,1]
       }
  g = {1 => [1,1,1,1,1,1,1,1],
       2 => [1,0,0,0,0,0,1,1],
       3 => [0,1,1,1,1,1,0,1],
       4 => [0,1,1,0,1,1,0,1],
       5 => [0,1,1,0,1,1,0,1],
       6 => [1,0,1,0,0,0,0,1]
       }
  h = {1 =>[1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [1,1,1,0,1,1,1,1],
       4 => [1,1,1,0,1,1,1,1],
       5 => [1,1,1,0,1,1,1,1],
       6 => [0,0,0,0,0,0,0,1]
       }
  i = {1 => [1,1,1,1,1,1,1,1],
       2 => [1,1,1,1,1,1,1,1],
       3 => [0,1,1,1,1,1,0,1],
       4 => [0,0,0,0,0,0,0,1],
       5 => [0,1,1,1,1,1,0,1],
       6 => [1,1,1,1,1,1,1,1]
       }
  j = {1 => [1,1,1,1,1,1,1,1],
       2 => [1,1,1,1,1,0,1,1],
       3 => [1,1,1,1,1,1,0,1],
       4 => [0,1,1,1,1,1,0,1],
       5 => [0,0,0,0,0,0,1,1],
       6 => [0,1,1,1,1,1,1,1]
       }
  k = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [1,1,1,0,1,1,1,1],
       4 => [1,1,0,1,0,1,1,1],
       5 => [1,0,1,1,1,0,1,1],
       6 => [0,1,1,1,1,1,0,1]
       }
  l = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [1,1,1,1,1,1,0,1],
       4 => [1,1,1,1,1,1,0,1],
       5 => [1,1,1,1,1,1,0,1],
       6 => [1,1,1,1,1,1,0,1]
       }
  m = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [1,0,1,1,1,1,1,1],
       4 => [1,1,0,0,1,1,1,1],
       5 => [1,0,1,1,1,1,1,1],
       6 => [0,0,0,0,0,0,0,1]
       }
  n = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [1,1,0,1,1,1,1,1],
       4 => [1,1,1,0,1,1,1,1],
       5 => [1,1,1,1,0,1,1,1],
       6 => [0,0,0,0,0,0,0,1]
       }
  o = {1 =>[1,1,1,1,1,1,1,1],
       2 => [1,0,0,0,0,0,1,1],
       3 => [0,1,1,1,1,1,0,1],
       4 => [0,1,1,1,1,1,0,1],
       5 => [0,1,1,1,1,1,0,1],
       6 => [1,0,0,0,0,0,1,1]
       }
  p = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [0,1,1,0,1,1,1,1],
       4 => [0,1,1,0,1,1,1,1],
       5 => [0,1,1,0,1,1,1,1],
       6 => [1,0,0,1,1,1,1,1]
       }
  q = {1 =>[1,1,1,1,1,1,1,1],
       2 => [1,0,0,0,0,0,1,1],
       3 => [0,1,1,1,1,1,0,1],
       4 => [0,1,1,1,0,1,0,1],
       5 => [0,1,1,1,1,0,1,1],
       6 => [1,0,0,0,0,1,0,1]
       }
  r = {1 =>[1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,0,1],
       3 => [0,1,1,0,1,1,1,1],
       4 => [0,1,1,0,0,1,1,1],
       5 => [0,1,1,0,1,0,1,1],
       6 => [1,0,0,1,1,1,0,1]
       }
  s = {1 => [1,1,1,1,1,1,1,1],
       2 => [1,0,0,1,1,1,0,1],
       3 => [0,1,1,0,1,1,0,1],
       4 => [0,1,1,0,1,1,0,1],
       5 => [0,1,1,0,1,1,0,1],
       6 => [0,1,1,1,0,0,1,1]
       }
  t = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,1,1,1,1,1,1,1],
       3 => [0,1,1,1,1,1,1,1],
       4 => [0,0,0,0,0,0,0,1],
       5 => [0,1,1,1,1,1,1,1],
       6 => [0,1,1,1,1,1,1,1]
       }
  u = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,1,1],
       3 => [1,1,1,1,1,1,0,1],
       4 => [1,1,1,1,1,1,0,1],
       5 => [1,1,1,1,1,1,0,1],
       6 => [0,0,0,0,0,0,1,1]
       }
  v = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,1,1,1,1],
       3 => [1,1,1,1,0,0,1,1],
       4 => [1,1,1,1,1,1,0,1],
       5 => [1,1,1,1,0,0,1,1],
       6 => [0,0,0,0,1,1,1,1]
       }
  w = {1 =>[1,1,1,1,1,1,1,1],
       2 => [0,0,0,0,0,0,1,1],
       3 => [1,1,1,1,1,1,0,1],
       4 => [1,1,1,0,0,0,1,1],
       5 => [1,1,1,1,1,1,0,1],
       6 => [0,0,0,0,0,0,1,1]
       }
  x = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,1,1,1,0,0,1],
       3 => [1,1,0,1,0,1,1,1],
       4 => [1,1,1,0,1,1,1,1],
       5 => [1,1,0,1,0,1,1,1],
       6 => [0,0,1,1,1,0,0,1]
       }
  y = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,0,0,1,1,1,1,1],
       3 => [1,1,1,0,1,1,1,1],
       4 => [1,1,1,1,0,0,0,1],
       5 => [1,1,1,0,1,1,1,1],
       6 => [0,0,0,1,1,1,1,1]
       }
  z = {1 => [1,1,1,1,1,1,1,1],
       2 => [0,1,1,1,1,0,0,1],
       3 => [0,1,1,1,0,1,0,1],
       4 => [0,1,1,0,1,1,0,1],
       5 => [0,1,0,1,1,1,0,1],
       6 => [0,0,1,1,1,1,0,1]
       }
  zero = {1 => [1,1,1,1,1,1,1,1],
          2 => [1,0,0,0,0,0,1,1],
          3 => [0,1,1,1,0,1,0,1],
          4 => [0,1,1,0,1,1,0,1],
          5 => [0,1,0,1,1,1,0,1],
          6 => [1,0,0,0,0,0,1,1]
          }
  one = {1 => [1,1,1,1,1,1,1,1],
         2 => [1,1,1,1,1,1,1,1],
         3 => [1,0,1,1,1,1,0,1],
         4 => [0,0,0,0,0,0,0,1],
         5 => [1,1,1,1,1,1,0,1],
         6 => [1,1,1,1,1,1,1,1]
         }
  two   = {1 => [1,1,1,1,1,1,1,1],
           2 => [1,0,1,1,1,1,0,1],
           3 => [0,1,1,1,1,0,0,1],
           4 => [0,1,1,1,0,1,0,1],
           5 => [0,1,1,0,1,1,0,1],
           6 => [1,0,0,1,1,1,0,1]
           }
  three = {1 => [1,1,1,1,1,1,1,1],
           2 => [0,1,1,1,1,0,1,1],
           3 => [0,1,1,1,1,1,0,1],
           4 => [0,1,0,1,1,1,0,1],
           5 => [0,0,1,0,1,1,0,1],
           6 => [0,1,1,1,0,0,1,1]
           }
  four =  {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,1,0,0,1,1,1],
           3 => [1,1,0,1,0,1,1,1],
           4 => [1,0,1,1,0,1,1,1],
           5 => [0,0,0,0,0,0,0,1],
           6 => [1,1,1,1,0,1,1,1]
           }
  five =  {1 => [1,1,1,1,1,1,1,1],
           2 => [0,0,0,1,1,0,1,1],
           3 => [0,1,0,1,1,1,0,1],
           4 => [0,1,0,1,1,1,0,1],
           5 => [0,1,0,1,1,1,0,1],
           6 => [0,1,1,0,0,0,1,1]
           }
  six  =  {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,0,0,0,0,1,1],
           3 => [1,0,1,0,1,1,0,1],
           4 => [0,1,1,0,1,1,0,1],
           5 => [0,1,1,0,1,1,0,1],
           6 => [1,1,1,1,0,0,1,1]
           }
  seven = {1 => [1,1,1,1,1,1,1,1],
           2 => [0,1,1,1,1,1,1,1],
           3 => [0,1,1,1,0,0,0,1],
           4 => [0,1,1,0,1,1,1,1],
           5 => [0,1,0,1,1,1,1,1],
           6 => [0,0,1,1,1,1,1,1]
           }
  eight = {1 => [1,1,1,1,1,1,1,1],
           2 => [1,0,0,1,0,0,1,1],
           3 => [0,1,1,0,1,1,0,1],
           4 => [0,1,1,0,1,1,0,1],
           5 => [0,1,1,0,1,1,0,1],
           6 => [1,0,0,1,0,0,1,1]
           }
  nine  = {1 => [1,1,1,1,1,1,1,1],
           2 => [1,0,0,1,1,1,1,1],
           3 => [0,1,1,0,1,1,0,1],
           4 => [0,1,1,0,1,1,0,1],
           5 => [0,1,1,0,1,0,1,1],
           6 => [1,0,0,0,0,1,1,1]
           }
  stop  = {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,1,1,1,1,1,1],
           3 => [1,1,1,1,1,1,1,1],
           4 => [1,1,1,1,1,0,0,1],
           5 => [1,1,1,1,1,0,0,1],
           6 => [1,1,1,1,1,1,1,1]
           }
  comma = {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,1,1,1,1,1,1],
           3 => [1,1,1,1,0,1,0,1],
           4 => [1,1,1,1,0,0,1,1],
           5 => [1,1,1,1,1,1,1,1],
           6 => [1,1,1,1,1,1,1,1]
           }
  speech_open = {1 => [1,1,1,1,1,1,1,1],
                 2 => [1,1,1,1,1,1,1,1],
                 3 => [1,0,0,1,1,1,1,1],
                 4 => [0,1,0,1,1,1,1,1],
                 5 => [1,0,0,1,1,1,1,1],
                 6 => [0,1,0,1,1,1,1,1]
                 }
  speech_close = {1 => [1,1,1,1,1,1,1,1],
                  2 => [0,1,0,1,1,1,1,1],
                  3 => [0,0,1,1,1,1,1,1],
                  4 => [0,1,0,1,1,1,1,1],
                  5 => [0,0,1,1,1,1,1,1],
                  6 => [1,1,1,1,1,1,1,1]
                  }
  single_speech_open = {1 => [1,1,1,1,1,1,1,1],
                        2 => [1,1,1,1,1,1,1,1],
                        3 => [1,1,1,1,1,1,1,1],
                        4 => [1,0,0,1,1,1,1,1],
                        5 => [0,1,0,1,1,1,1,1],
                        6 => [1,1,1,1,1,1,1,1]
                        }
  single_speech_closed = {1 => [1,1,1,1,1,1,1,1],
                          2 => [1,1,1,1,1,1,1,1],
                          3 => [0,1,0,1,1,1,1,1],
                          4 => [0,0,1,1,1,1,1,1],
                          5 => [1,1,1,1,1,1,1,1],
                          6 => [1,1,1,1,1,1,1,1]
                          }
  question_mark = {1 => [1,1,1,1,1,1,1,1],
                   2 => [1,0,1,1,1,1,1,1],
                   3 => [0,1,1,1,1,1,1,1],
                   4 => [0,1,1,1,0,1,0,1],
                   5 => [0,1,1,0,1,1,1,1],
                   6 => [1,0,0,1,1,1,1,1]
                   }
  exclamation_mark = {1 => [1,1,1,1,1,1,1,1],
                      2 => [1,1,1,1,1,1,1,1],
                      3 => [1,1,1,1,1,1,1,1],
                      4 => [0,0,0,0,1,0,0,1],
                      5 => [1,1,1,1,1,1,1,1],
                      6 => [1,1,1,1,1,1,1,1]
                      }
  at =    {1 => [1,1,1,1,1,1,1,1],
           2 => [1,0,0,0,0,0,1,1],
           3 => [0,1,1,0,1,1,0,1],
           4 => [0,1,0,1,0,1,0,1],
           5 => [0,1,0,0,0,1,0,1],
           6 => [1,0,0,0,0,1,1,1]
           }
  underscore =  {1 => [1,1,1,1,1,1,1,1],
                 2 => [1,1,1,1,1,1,0,1],
                 3 => [1,1,1,1,1,1,0,1],
                 4 => [1,1,1,1,1,1,0,1],
                 5 => [1,1,1,1,1,1,0,1],
                 6 => [1,1,1,1,1,1,0,1]
                 }
  star =  {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,0,1,0,1,1,1],
           3 => [1,1,1,0,1,1,1,1],
           4 => [1,0,0,0,0,0,1,1],
           5 => [1,1,1,0,1,1,1,1],
           6 => [1,1,0,1,0,1,1,1]
           }
  hash =  {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,0,1,0,1,1,1],
           3 => [0,0,0,0,0,0,0,1],
           4 => [1,1,0,1,0,1,1,1],
           5 => [0,0,0,0,0,0,0,1],
           6 => [1,1,0,1,0,1,1,1]
           }
  dollar = {1 => [1,1,1,1,1,1,1,1],
            2 => [1,1,0,1,1,0,1,1],
            3 => [1,0,1,0,1,0,1,1],
            4 => [1,1,1,1,1,1,1,1],
            5 => [1,0,1,0,1,0,1,1],
            6 => [1,1,1,1,0,1,1,1]
            }
  percent =  {1 => [1,1,1,1,1,1,1,1],
              2 => [1,0,0,1,1,0,1,1],
              3 => [1,0,0,1,0,1,1,1],
              4 => [1,1,1,0,1,1,1,1],
              5 => [1,1,0,1,0,0,1,1],
              6 => [1,0,1,1,0,0,1,1]
              }
  ampersand =  {1 => [1,1,1,1,1,1,1,1],
                2 => [1,1,1,1,0,0,1,1],
                3 => [1,0,1,0,1,1,0,1],
                4 => [0,1,0,0,1,1,0,1],
                5 => [1,0,0,1,0,0,1,1],
                6 => [1,1,1,1,0,1,0,1]
                }
  bracket_open =  {1 => [1,1,1,1,1,1,1,1],
                   2 => [1,1,1,1,1,1,1,1],
                   3 => [1,1,1,1,1,1,1,1],
                   4 => [1,1,0,0,0,1,1,1],
                   5 => [1,0,1,1,1,0,1,1],
                   6 => [0,1,1,1,1,1,0,1]
                   }
  bracket_closed =  {1 => [1,1,1,1,1,1,1,1],
                     2 => [0,1,1,1,1,1,0,1],
                     3 => [1,0,1,1,1,0,1,1],
                     4 => [1,1,0,0,0,1,1,1],
                     5 => [1,1,1,1,1,1,1,1],
                     6 => [1,1,1,1,1,1,1,1]
                     }
  plus =  {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,1,0,1,1,1,1],
           3 => [1,1,1,0,1,1,1,1],
           4 => [0,0,0,0,0,0,0,1],
           5 => [1,1,1,0,1,1,1,1],
           6 => [1,1,1,0,1,1,1,1]
           }
  minus = {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,1,0,1,1,1,1],
           3 => [1,1,1,0,1,1,1,1],
           4 => [1,1,1,0,1,1,1,1],
           5 => [1,1,1,0,1,1,1,1],
           6 => [1,1,1,0,1,1,1,1]
           }
  space = {1 => [1,1,1,1,1,1,1,1],
           2 => [1,1,1,1,1,1,1,1],
           3 => [1,1,1,1,1,1,1,1],
           4 => [1,1,1,1,1,1,1,1],
           5 => [1,1,1,1,1,1,1,1],
           6 => [1,1,1,1,1,1,1,1]
           }

  case letter
  when "a" then return a
  when "b" then return b
  when "c" then return c
  when "d" then return d
  when "e" then return e
  when "f" then return f
  when "g" then return g
  when "h" then return h
  when "i" then return i
  when "j" then return j
  when "k" then return k
  when "l" then return l
  when "m" then return m
  when "n" then return n
  when "o" then return o
  when "p" then return p
  when "q" then return q
  when "r" then return r
  when "s" then return s
  when "t" then return t
  when "u" then return u
  when "v" then return v
  when "w" then return w
  when "x" then return x
  when "y" then return y
  when "z" then return z
  when "1" then return one
  when "2" then return two
  when "3" then return three
  when "4" then return four
  when "5" then return five
  when "6" then return six
  when "7" then return seven
  when "8" then return eight
  when "9" then return nine
  when "0" then return zero
  when "." then return stop
  when "," then return comma
  when '"' then return speech_open
  when '"' then return speech_closed
  when "'" then return single_speech_open
  when "'" then return single_speech_closed
  when "?" then return question_mark
  when "!" then return exclamation_mark
  when "@" then return at
  when "_" then return underscore
  when "*" then return star
  when "#" then return hash
  when "$" then return dollar
  when "%" then return percent
  when "&" then return ampersand
  when "(" then return bracket_open
  when ")" then return bracket_closed
  when "+" then return plus
  when "-" then return minus
  when " " then return space
  else return space
  end
end

main()
